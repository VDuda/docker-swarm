- meta: flush_handlers
  tags: [service]

- name: Compose directory is present
  file:
    dest: "{{ compose_config_dir }}/{{ container_name }}"
    state: directory
  tags: [service]

- name: Compose template is present
  copy:
    src: "{{ container_name }}.yml"
    dest: "{{ compose_config_dir }}/{{ container_name }}/docker-compose.yml.ctmpl"
  register: result
  tags: [service]

- include: apply-service-template.yml

- name: DB container is running
  shell: docker-compose up -d --no-recreate db
  args:
    chdir: "{{ compose_config_dir }}/{{ container_name }}"
  environment:
    DOCKER_HOST: tcp://0.0.0.0:2375
  when: has_db is defined
  register: result
  tags: [service]

- include: apply-service-template.yml

- name: Blue is retrieved from Consul
  consul_kv:
    action: get
    key: "services/{{ container_image }}/{{ container_name }}-blue"
  register: is_blue
  ignore_errors: yes
  tags: [service]

- name: Set new color to blue
  set_fact:
    container_new_color: blue
    container_color: green
  when: is_blue|failed
  tags: [service]

- name: Set new color to green
  set_fact:
    container_new_color: green
    container_color: blue
  when: is_blue|success
  tags: [service]

- name: Container is pulled
  shell: docker-compose pull {{ container_new_color }}
  args:
    chdir: "{{ compose_config_dir }}/{{ container_name }}"
  environment:
    DOCKER_HOST: tcp://0.0.0.0:2375
  tags: [service]

- name: Container is up
  shell: docker-compose up -d {{ container_new_color }}
  args:
    chdir: "{{ compose_config_dir }}/{{ container_name }}"
  environment:
    DOCKER_HOST: tcp://0.0.0.0:2375
  tags: [service]

- name: Simulate testing
  shell: sleep 3
  tags: [service]

- name: nginx config template is present
  template: src=nginx.conf.ctmpl.j2 dest=/data/nginx/templates/{{ container_name }}.conf.ctmpl
  tags: [service]

- name: nginx template is applied
  shell: >
    consul-template \
      -consul localhost:8500 \
      -template "/data/nginx/templates/{{ container_name }}.conf.ctmpl:/data/nginx/includes/{{ container_name }}.conf:docker kill -s HUP nginx" \
      -once
  tags: [service]

- name: Consul configs are present
  template:
    src: consul_service.json.j2
    dest: /etc/consul.d/service-{{ container_name }}.json
  register: health_result
  tags: [service]

- name: Consul is restarted
  shell: killall -HUP consul
  when: health_result|changed
  tags: [service]

- name: Old container is stopped
  shell: docker-compose stop {{ container_color }}
  args:
    chdir: "{{ compose_config_dir }}/{{ container_name }}"
  environment:
    DOCKER_HOST: tcp://0.0.0.0:2375
  tags: [service]